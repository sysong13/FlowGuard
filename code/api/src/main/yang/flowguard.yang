module flowguard {
    yang-version 1;
    namespace "urn:opendaylight:params:xml:ns:yang:flowguard";
    prefix "flowguard";
    description "YANG version of the FIREWALL-MIB.";

    revision "2017-05-05" {
        description "Initial revision of flowguard model";
    }

    grouping fwrule {
        leaf ruleId {
           type uint16;
           config true;
           mandatory true;
           description "Name of FW rule";
        }
        leaf node {
           type string;
        }
        leaf inPort {
           type string;
        }

        leaf sourceIpAddress {
          type string;
          config true;
          mandatory false;
          description
            "The IP address source";
        }

        leaf destinationIpAddress {
          type string;
          config true;
          mandatory false;
          description
            "The IP address destination";
        }

        leaf sourcePort {
            type string;
            config true;
            mandatory false;
            description
              "The source port";
        }

        leaf destinationPort {
            type string;
            config true;
            mandatory false;
            description
              "The destination port";
        }

        leaf action {
            type enumeration {
              enum "block" {
                value 1;
                description
                    "Block = 1";
              }
              enum "allow" {
                value 2;
                description
                  "Allow = 2";
              }
            }
            config true;
            mandatory true;
          }
  }

    grouping rule {

    	leaf name {
    		type string;
    		config true;
    		mandatory false;
    		description "Name of FW rule";
    	}
    	leaf node {
        	type string;
        }
    	leaf destinationIpAddress {
            type string;
            config true;
            mandatory false;
            description
              "The IP address destination";
          }


          leaf destinationPort {
              type uint16;
              config true;
              mandatory false;
              description
                "The destination port";
          }

      }
    container rule-registry {
    	list rule-registry-entry {
    		key "name";
    		uses flowguard:rule;
    		leaf greeting {
    			type string;
    		}
    	}
    }
    container fwrule-registry {
        list fwrule-registry-entry {
            key "ruleId";
            uses flowguard:fwrule;
        }
    }
    container controls {
        leaf action {
            type enumeration {
              enum "Enable" {
                value 1;
              }
              enum "Disable" {
                value 2;
                description
                  "TCP protocol.";
              }
            }
            config true;
            mandatory false;
          }
        leaf greeting {
            type string;
        }
    }

    rpc add-rule {
    	input {
    		uses flowguard:rule;
    	}
    	output {
    		leaf greeting {
    			type string;
    		}
    	}
    }

    rpc flowguard-control {
        input {
            leaf action {
                type enumeration {
                  enum "Enable" {
                    value 1;
                  }
                  enum "Disable" {
                    value 2;
                    description
                      "TCP protocol.";
                  }
                }
                config true;
                mandatory false;
              }
        }
        output {
            leaf greeting {
                type string;
            }
        }
    }

    rpc add-static-fwrule {
        input {
            leaf filePath {
                type string;
              }
        }
        output {
            leaf greeting {
                type string;
            }
        }
    }

    rpc add-dynamic-fwrule {
        input {
            uses flowguard:fwrule;
        }
        output {
            leaf greeting {
                type string;
            }
        }
    }

}

